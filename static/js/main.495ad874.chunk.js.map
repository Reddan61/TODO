{"version":3,"sources":["components/folders/Folders.module.css","components/folderItem/FolderItem.module.css","App.module.css","components/redux/Reducer.ts","components/folderItem/folderItem.tsx","components/folder/folder.tsx","components/folders/Folders.tsx","components/taskItems/taskItem.tsx","components/tasks/Tasks.tsx","App.tsx","serviceWorker.ts","components/redux/store.ts","index.tsx","components/folder/folder.module.css","components/tasks/Tasks.module.css","components/taskItems/taskItem.module.css"],"names":["module","exports","initialState","isDeletingFolders","ChangedFolderId","ChangedSubFolderId","folders","tasks","ChangedFolderIdForDeleteSubFolders","actions","name","type","payload","idFolder","idSubFolder","id","title","text","addNewFolderThunk","dispatch","a","compose","connect","state","FolderPage","setChangedFolderIdThunk","deleteSubFolderThunk","props","className","css","folderItem","onClick","SubFolder","folderItem__body","folderItem__body_active","style","backgroundColor","Math","ceil","random","folderItem__circle","folderItem__title","React","memo","addNewSubFolderThunk","setFolderIdForDeleteSubFoldersThunk","deleteFolderThunk","useState","isOpen","ChangeOpen","isOpenSettings","ChangeOpenSettings","isAddingNewSubFolder","setAddingNewSubFolder","inputText","setInputText","onLoad","folder","Subfolders","folder_delete","folder__name","folder__name_delete","folder__plus_active","folder__plus","folder__settings","settings__list","folder__items","map","el","index","key","autoFocus","onChange","e","target","value","onBlur","setDeletingFoldersThunk","isAdding","ChangeAdd","ChangeTextInput","folders__items","folders__menu","menu__add","menu__delete","deleteTaskThunk","taskItem","taskItem__topic","taskItem__cross","task","taskItem__text","text__area","text__area_active","taskItem__more","container__more_active","changedFolderId","changedSubFolderId","taskItems","addNewTaskThunk","textAreaValue","ChangeValueTextArea","textInputValue","ChangeValueInput","tasks__body","tasks__popup","tasks__items","footer","footer__title","footer__text","scrollHeight","height","textAreaChange","getFoldersThunk","localStorage","getItem","JSON","parse","getTasksThunk","isGotFolders","SetFolders","useEffect","container","container__wrapped","Boolean","window","location","hostname","match","reducers","combineReducers","action","length","setItem","stringify","isEmptyChangedSubFolderOfFolder","Folders","newSubFolders","Object","assign","filter","newFolders","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.495ad874.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"folders\":\"Folders_folders__I5XVN\",\"folders__items\":\"Folders_folders__items__2V1HH\",\"folders__menu\":\"Folders_folders__menu__gvGSJ\",\"menu__add\":\"Folders_menu__add__38Gfl\",\"menu__delete\":\"Folders_menu__delete__AsetA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"folderItem__body\":\"FolderItem_folderItem__body__2K6b7\",\"folderItem__body_active\":\"FolderItem_folderItem__body_active__LSPix\",\"folderItem__circle\":\"FolderItem_folderItem__circle__1COjs\",\"folderItem__title\":\"FolderItem_folderItem__title__1wZ17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1UrAA\",\"container__wrapped\":\"App_container__wrapped__16q3T\"};","import {ActionsTypes, ThunkActionType} from \"./store\";\r\nimport {act} from \"react-dom/test-utils\";\r\n\r\nconst ADDNEWFOLDER = \"ADD_NEW_FOLDER\";\r\nconst GETFOLDERS = \"GET_FOLDERS\";\r\nconst GETTASKS = \"GET_TASKS\";\r\nconst SETFOLDERS = \"SET_FOLDERS\";\r\nconst SETTASKS = \"SET_TASKS\";\r\nconst ADDNEWSUBFOLDER = \"ADD_NEW_SUBFOLDER\";\r\nconst ADDNEWTASK = \"ADD_NEW_TASK\";\r\nconst ChangeFolderId = \"CHANGE_FOLDER_ID\";\r\nconst deleteSubFolder = \"DELETE_SUBFOLDER\";\r\nconst ChangeFolderIdForDeleteSubFolders = \"CHANGE_FOLDER_ID_FOR_DELETE_SUBFOLDERS\";\r\nconst deleteFolder = \"DELETE_FOLDER\";\r\nconst setDeletingFolders = \"SET_DELETING_FOLDERS\";\r\nconst deleteTask = \"DELETE_TASK\";\r\n\r\nlet initialState = {\r\n    isDeletingFolders: false,\r\n    ChangedFolderId: null as null | number,\r\n    ChangedSubFolderId: null as null | number,\r\n    folders: null as FoldersType | null,\r\n    tasks: null as tasksType | null,\r\n    ChangedFolderIdForDeleteSubFolders: null as null | number\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\ntype actionsType = ActionsTypes<typeof actions>\r\n\r\nexport const Reducer = (state = initialState, action: actionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_NEW_FOLDER\":\r\n            return {\r\n                ...state,\r\n                folders: state.folders !== null ? [...state.folders!, {\r\n                    id: state.folders[state.folders!.length - 1].id + 1,\r\n                    name: action.payload.name,\r\n                    Subfolders: null\r\n                }] : [{\r\n                    id: 0,\r\n                    name: action.payload.name,\r\n                    Subfolders: null\r\n                }]\r\n\r\n            };\r\n        case \"GET_FOLDERS\":\r\n            return {\r\n                ...state,\r\n                folders: action.payload.folders\r\n            };\r\n        case \"GET_TASKS\":\r\n            return {\r\n                ...state,\r\n                tasks: action.payload.tasks\r\n            };\r\n        case \"SET_FOLDERS\":\r\n            localStorage.setItem(\"folders\", JSON.stringify(state.folders));\r\n            return {...state};\r\n        case \"SET_TASKS\":\r\n            localStorage.setItem(\"tasks\", JSON.stringify(state.tasks));\r\n            return {...state};\r\n        case \"ADD_NEW_SUBFOLDER\":\r\n            return {\r\n                ...state,\r\n                folders: state.folders!.map(el => {\r\n                    if (el.id === action.payload.id) {\r\n                        if (el.Subfolders) {\r\n                            el.Subfolders = [...el.Subfolders, {\r\n                                id: el.Subfolders.length + 1,\r\n                                name: action.payload.name,\r\n                            }]\r\n                        } else {\r\n                            el.Subfolders = [{id: 0, name: action.payload.name}]\r\n                        }\r\n                    }\r\n                    return el\r\n                })\r\n            };\r\n        case \"ADD_NEW_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks !== null ? [...state.tasks, {\r\n                    id: state.tasks.length !== 0?state.tasks[state.tasks!.length - 1].id + 1:0,\r\n                    title: action.payload.title,\r\n                    text: action.payload.text,\r\n                    idFolder: state.ChangedFolderId!,\r\n                    idSubFolder: state.ChangedSubFolderId!\r\n                }] : [{\r\n                    id:0,\r\n                    title: action.payload.title,\r\n                    text: action.payload.text,\r\n                    idFolder: state.ChangedFolderId!,\r\n                    idSubFolder: state.ChangedSubFolderId!\r\n                }]\r\n            };\r\n        case \"CHANGE_FOLDER_ID\":\r\n            return {\r\n                ...state,\r\n                ChangedFolderId: action.payload.idFolder,\r\n                ChangedSubFolderId: action.payload.idSubFolder\r\n            };\r\n        case \"DELETE_SUBFOLDER\":\r\n            let isEmptyChangedSubFolderOfFolder = false;\r\n            let Folders: FoldersType = state.folders!.map(el => {\r\n                if (el.id === state.ChangedFolderIdForDeleteSubFolders) {\r\n                    let newSubFolders = Object.assign({}, el);\r\n                    newSubFolders.Subfolders = el.Subfolders!.filter(el => {\r\n                        return el.id !== action.payload.idSubFolder\r\n                    });\r\n                    if (newSubFolders.Subfolders.length === 0) {\r\n                        isEmptyChangedSubFolderOfFolder = true;\r\n                        newSubFolders.Subfolders = null;\r\n                    }\r\n                    return newSubFolders;\r\n                }\r\n                return el\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                folders: Folders,\r\n                ChangedSubFolderId: state.ChangedSubFolderId === action.payload.idSubFolder ? null : state.ChangedSubFolderId,\r\n                tasks: state.tasks !== null ? state.tasks!.filter(el => {\r\n                    return el.idSubFolder !== action.payload.idSubFolder\r\n                }) : state.tasks,\r\n                ChangedFolderIdForDeleteSubFolders: isEmptyChangedSubFolderOfFolder ? null : state.ChangedFolderIdForDeleteSubFolders\r\n            };\r\n        case \"DELETE_FOLDER\":\r\n            let newFolders: null | FoldersType = state.folders!.filter(el => {\r\n                return el.id !== action.payload.idFolder\r\n            });\r\n            if (newFolders.length === 0) {\r\n                newFolders = null;\r\n            }\r\n            return {\r\n                ...state,\r\n                folders: newFolders,\r\n                tasks: state.tasks !== null ? state.tasks.filter(el => {\r\n                    return el.idFolder !== action.payload.idFolder\r\n                }) : state.tasks,\r\n                ChangedFolderId: state.ChangedFolderId === action.payload.idFolder ? null : state.ChangedFolderId,\r\n                ChangedSubFolderId: null\r\n            };\r\n        case \"CHANGE_FOLDER_ID_FOR_DELETE_SUBFOLDERS\":\r\n            return {\r\n                ...state,\r\n                ChangedFolderIdForDeleteSubFolders: action.payload.idFolder\r\n            };\r\n        case \"SET_DELETING_FOLDERS\":\r\n            return {\r\n                ...state,\r\n                isDeletingFolders: !state.isDeletingFolders\r\n            };\r\n            case \"DELETE_TASK\":\r\n                return {\r\n                ...state,\r\n                    tasks: state.tasks!.filter(el => {\r\n                        return el.id !== action.payload.id\r\n                    })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst actions = {\r\n    addNewFolderAC: (name: string) => ({type: ADDNEWFOLDER, payload: {name}} as const),\r\n    getFoldersAC: (folders: FoldersType | null) => ({type: GETFOLDERS, payload: {folders}} as const),\r\n    getTasksAC: (tasks: tasksType | null) => ({type: GETTASKS, payload: {tasks}} as const),\r\n    setFoldersAC: () => ({type: SETFOLDERS} as const),\r\n    setTasksAC: () => ({type: SETTASKS} as const),\r\n    setChangedFolderIdAC: (idFolder: number, idSubFolder: number) => ({\r\n        type: ChangeFolderId,\r\n        payload: {idFolder, idSubFolder}\r\n    } as const),\r\n    addNewSubFolderAC: (id: number, name: string) => ({type: ADDNEWSUBFOLDER, payload: {id, name}} as const),\r\n    addNewTaskAC: (title: string, text: string) => ({type: ADDNEWTASK, payload: {text, title}} as const),\r\n    deleteSubFolderAC: (idSubFolder: number) => ({type: deleteSubFolder, payload: {idSubFolder}} as const),\r\n    changeFolderIdForDeleteSubFoldersAC: (idFolder: number | null) => ({\r\n        type: ChangeFolderIdForDeleteSubFolders,\r\n        payload: {idFolder}\r\n    } as const),\r\n    deleteFolderAC: (idFolder: number | null) => ({\r\n        type: deleteFolder,\r\n        payload: {idFolder}\r\n    } as const),\r\n    setDeletingFoldersAC: () => ({type: setDeletingFolders} as const),\r\n    deleteTaskAC: (id:number) => ({type: deleteTask, payload: {id}} as const)\r\n};\r\n\r\nexport const setDeletingFoldersThunk = (): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.setDeletingFoldersAC());\r\n    }\r\n};\r\nexport const deleteTaskThunk = (id:number): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.deleteTaskAC(id));\r\n        dispatch(actions.setTasksAC())\r\n    }\r\n};\r\n\r\nexport const addNewFolderThunk = (name: string): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.addNewFolderAC(name));\r\n        dispatch(actions.setFoldersAC());\r\n    }\r\n};\r\nexport const setChangedFolderIdThunk = (idFolder: number, idSubFolder: number): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.setChangedFolderIdAC(idFolder, idSubFolder));\r\n    }\r\n};\r\n\r\nexport const addNewSubFolderThunk = (id: number, name: string): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.addNewSubFolderAC(id, name));\r\n        dispatch(actions.setFoldersAC());\r\n    }\r\n};\r\n\r\nexport const addNewTaskThunk = (title: string, text: string): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.addNewTaskAC(title, text));\r\n        dispatch(actions.setTasksAC());\r\n    }\r\n};\r\n\r\nexport const setFolderIdForDeleteSubFoldersThunk = (idFolder: number | null): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.changeFolderIdForDeleteSubFoldersAC(idFolder));\r\n    }\r\n};\r\n\r\nexport const deleteFolderThunk = (idFolder: number | null): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.deleteFolderAC(idFolder));\r\n        dispatch(actions.setFoldersAC());\r\n        dispatch(actions.setTasksAC());\r\n    }\r\n};\r\nexport const deleteSubFolderThunk = (idSubFolder: number): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.deleteSubFolderAC(idSubFolder));\r\n        dispatch(actions.setFoldersAC());\r\n        dispatch(actions.setTasksAC());\r\n    }\r\n};\r\n\r\nexport const getFoldersThunk = (): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        let folders = localStorage.getItem('folders');\r\n        if (folders) {\r\n            dispatch(actions.getFoldersAC(JSON.parse(folders)))\r\n        } else {\r\n            dispatch(actions.getFoldersAC(null))\r\n        }\r\n\r\n    }\r\n};\r\nexport const getTasksThunk = (): ThunkActionType<actionsType> => {\r\n    return async (dispatch) => {\r\n        let tasks = localStorage.getItem('tasks');\r\n        if (tasks) {\r\n            dispatch(actions.getTasksAC(JSON.parse(tasks)))\r\n        } else {\r\n            dispatch(actions.getTasksAC(null))\r\n        }\r\n\r\n    }\r\n};\r\n\r\n\r\nexport type FoldersType = Array<{\r\n    id: number,\r\n    name: string,\r\n    Subfolders: Array<{\r\n        id: number,\r\n        name: string\r\n    }> | null\r\n}>\r\n\r\n\r\ntype tasksType = Array<{\r\n    id:number,\r\n    idSubFolder: number,\r\n    idFolder: number,\r\n    title: string,\r\n    text: string\r\n}> | null","import React from \"react\";\r\nimport css from \"./FolderItem.module.css\"\r\nimport {compose} from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {StateType} from \"../redux/store\";\r\nimport {deleteSubFolderThunk, setChangedFolderIdThunk} from \"../redux/Reducer\";\r\n\r\n\r\nconst FolderItem:React.FC<otherPropsType & mapStateToDispatchType & mapStateToPropsType> = (props) => {\r\n\r\n    return <div className={css.folderItem} onClick={() => {\r\n        if(props.ChangedFolderIdForDeleteSubFolders === props.id) {\r\n            props.deleteSubFolderThunk(props.SubFolder.id)\r\n        }\r\n    }}>\r\n        <div className={`${css.folderItem__body} ${props.ChangedFolderIdForDeleteSubFolders === props.id? css.folderItem__body_active: \"\"}`}>\r\n            <div\r\n                style={{backgroundColor: `rgb(${Math.ceil(Math.random() * (255 - 0) + 0)},${Math.random() * (255 - 0) + 0},${Math.random() * (255 - 0) + 0})`}}\r\n                className={css.folderItem__circle}>\r\n            </div>\r\n            <div className={css.folderItem__title} onClick={() => {\r\n                props.setChangedFolderIdThunk(props.id,props.SubFolder.id)\r\n            }}>\r\n                {props.SubFolder.name}\r\n            </div>\r\n        </div>\r\n    </div>\r\n};\r\n\r\n\r\ntype otherPropsType = {\r\n    id : number,\r\n    SubFolder: {\r\n        id:number\r\n        name:string\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:StateType) => {\r\n    return {\r\n        ChangedFolderIdForDeleteSubFolders: state.FolderPage.ChangedFolderIdForDeleteSubFolders\r\n    }\r\n};\r\n\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype mapStateToDispatchType = {\r\n    setChangedFolderIdThunk:(idFolder:number,idSubFolder:number) => void,\r\n    deleteSubFolderThunk: (idSubFolder:number) => void\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {setChangedFolderIdThunk, deleteSubFolderThunk})\r\n)(FolderItem);\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport css from \"./folder.module.css\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/store\";\r\nimport FolderItem from \"../folderItem/folderItem\";\r\nimport {\r\n    addNewSubFolderThunk,\r\n    deleteFolderThunk,\r\n    setFolderIdForDeleteSubFoldersThunk\r\n} from \"../redux/Reducer\";\r\n\r\nconst Folder: React.FC<mapStateToPropsType & otherPropsType & mapDispatchToPropsType> = (props) => {\r\n    const [isOpen, ChangeOpen] = useState(false);\r\n    const [isOpenSettings, ChangeOpenSettings] = useState(false);\r\n    const [isAddingNewSubFolder, setAddingNewSubFolder] = useState(false);\r\n    const [inputText, setInputText] = useState(\"\");\r\n\r\n    return <div onLoad={() => {\r\n        if (props.folder!.Subfolders === null) {\r\n            props.setFolderIdForDeleteSubFoldersThunk(null);\r\n        }\r\n    }} className={`${css.folder} ${props.isDeletingFolders ? css.folder_delete : ''}`} onClick={() => {\r\n        if (props.isDeletingFolders) {\r\n            props.deleteFolderThunk(props.folder!.id)\r\n        }\r\n    }}>\r\n        <div className={`${css.folder__name} ${props.isDeletingFolders ? css.folder__name_delete : ''}`}>\r\n            <div onClick={() => {\r\n                ChangeOpen(!isOpen);\r\n            }} className={isOpen ? css.folder__plus_active : css.folder__plus}>\r\n            </div>\r\n            <span>{props.folder!.name}\r\n            </span>\r\n            <div className={css.folder__settings} onClick={() => {\r\n                ChangeOpen(true);\r\n                ChangeOpenSettings(!isOpenSettings)\r\n            }}>\r\n                <span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        {isOpenSettings && <div className={css.settings__list}>\r\n            <ul>\r\n                <li onClick={() => {\r\n                    ChangeOpen(true);\r\n                    ChangeOpenSettings(false);\r\n                    setAddingNewSubFolder(true);\r\n                }}>Добавить\r\n                </li>\r\n\r\n                {props.ChangedFolderIdForDeleteSubFolders === props.folder!.id && props.folder!.Subfolders !== null ?\r\n                    <li\r\n                        onClick={() => {\r\n                            ChangeOpen(true);\r\n                            ChangeOpenSettings(false);\r\n                            props.setFolderIdForDeleteSubFoldersThunk(null);\r\n                        }\r\n                        }\r\n                    >\r\n                        Отмена\r\n                    </li> : <li onClick={() => {\r\n                        ChangeOpen(true);\r\n                        props.setFolderIdForDeleteSubFoldersThunk(props.folder!.id);\r\n                        ChangeOpenSettings(false);\r\n                    }\r\n                    }>Удалить</li>}\r\n\r\n            </ul>\r\n        </div>}\r\n\r\n        {isOpen && <div className={css.folder__items}>\r\n\r\n            {props.folder!.Subfolders && props.folder!.Subfolders.map((el, index) => <FolderItem SubFolder={el}\r\n                                                                                                 id={props.folder!.id}\r\n                                                                                                 key={el.id + index}/>)}\r\n        </div>}\r\n\r\n        {isAddingNewSubFolder && <input autoFocus onChange={\r\n            (e) => {\r\n                setInputText(e.target.value)\r\n            }\r\n        } value={inputText} onBlur={() => {\r\n            if (inputText !== '') {\r\n                setAddingNewSubFolder(false);\r\n                props.addNewSubFolderThunk(props.folder!.id, inputText);\r\n                setInputText('');\r\n            } else {\r\n                setAddingNewSubFolder(false);\r\n            }\r\n        }}/>}\r\n    </div>\r\n};\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        ChangedFolderIdForDeleteSubFolders: state.FolderPage.ChangedFolderIdForDeleteSubFolders,\r\n        isDeletingFolders: state.FolderPage.isDeletingFolders\r\n    }\r\n};\r\n\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype otherPropsType = {\r\n    folder: {\r\n        id: number,\r\n        name: string,\r\n        Subfolders: Array<{\r\n            id: number\r\n            name: string\r\n        }> | null\r\n    } | null\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addNewSubFolderThunk: (id: number, name: string) => void,\r\n    setFolderIdForDeleteSubFoldersThunk: (idFolder: number | null) => void\r\n    deleteFolderThunk: (idFolder: number | null) => void\r\n}\r\nexport default React.memo(compose(\r\n    connect(mapStateToProps, {addNewSubFolderThunk, setFolderIdForDeleteSubFoldersThunk, deleteFolderThunk})\r\n)(Folder));","import React, {useEffect, useState} from \"react\";\r\nimport css from \"./Folders.module.css\"\r\nimport Folder from \"../folder/folder\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/store\";\r\nimport {addNewFolderThunk, setDeletingFoldersThunk} from \"../redux/Reducer\";\r\n\r\nconst Folders: React.FC<mapStateToPropsType & mapDispatchToPropsType> = (props) => {\r\n    let [isAdding, ChangeAdd] = useState(false);\r\n    let [inputText, ChangeTextInput] = useState('');\r\n    return <div className={css.folders}>\r\n        <div className={css.folders__items}>\r\n            {props.folders}\r\n            {isAdding && <input\r\n                value={inputText}\r\n                autoFocus\r\n                onChange={(e) => ChangeTextInput(e.target.value)}\r\n                onBlur={() => {\r\n                    if (inputText !== \"\") {\r\n                        ChangeAdd(false);\r\n                        props.addNewFolderThunk(inputText);\r\n                        ChangeTextInput('');\r\n                    } else {\r\n                        ChangeAdd(false);\r\n                    }\r\n                }}\r\n            />}\r\n        </div>\r\n        <div className={css.folders__menu}>\r\n            <button className={css.menu__add} onClick={() => ChangeAdd(true)}>Добавить папку</button>\r\n            {props.isDeletingFolders ? <button className={css.menu__delete} onClick={ () => props.setDeletingFoldersThunk()}>Отмена</button> :\r\n                <button className={css.menu__delete} onClick={ () => props.setDeletingFoldersThunk()}>Удалить папку</button>}\r\n            {props.isDeletingFolders && <span>Выберите папку</span>}\r\n        </div>\r\n    </div>\r\n};\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        folders: state.FolderPage.folders && state.FolderPage.folders.map((el, index) => <Folder key={el.id + index}\r\n                                                                                                 folder={el}/>),\r\n        isDeletingFolders: state.FolderPage.isDeletingFolders\r\n    }\r\n};\r\n\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype mapDispatchToPropsType = {\r\n    addNewFolderThunk: (name: string) => void,\r\n    setDeletingFoldersThunk: () => void\r\n}\r\n\r\nexport default React.memo(compose(\r\n    connect(mapStateToProps, {addNewFolderThunk,setDeletingFoldersThunk})\r\n)(Folders));","import React, {useState} from \"react\";\r\nimport css from \"./taskItem.module.css\"\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/store\";\r\nimport {deleteTaskThunk} from \"../redux/Reducer\";\r\n\r\nconst TaskItem:React.FC<otherPropsType & mapDispatchToPropsType> = (props) => {\r\n    let [isOpen, ChangeOpen] = useState(false);\r\n    return <div className={css.taskItem}>\r\n        <div className={css.taskItem__topic}>\r\n            <div className={css.taskItem__cross} onClick={() => {\r\n                props.deleteTaskThunk(props.task.id);\r\n            }}>\r\n            </div>\r\n            <span>{props.task.title}</span>\r\n        </div>\r\n        <div className={css.taskItem__text}>\r\n            <span className={`${css.text__area} ${isOpen?css.text__area_active:''}`}>\r\n                {props.task.text}\r\n            </span>\r\n            <div className={`${css.taskItem__more} ${isOpen?css.container__more_active:''}` } onClick={() => {\r\n                ChangeOpen(!isOpen)\r\n            }}>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n};\r\n\r\n\r\ntype otherPropsType = {\r\n    task: {\r\n        id:number,\r\n        idSubFolder: number,\r\n        idFolder: number,\r\n        title:string,\r\n        text:string\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:StateType) => {\r\n    return {\r\n\r\n    }\r\n};\r\n\r\ntype mapDispatchToPropsType = {\r\n    deleteTaskThunk: (id:number) => void\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,{deleteTaskThunk})\r\n)(TaskItem);","import React, {useState} from \"react\";\r\nimport css from \"./Tasks.module.css\";\r\nimport TaskItem from \"../taskItems/taskItem\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/store\";\r\nimport {addNewTaskThunk} from \"../redux/Reducer\";\r\n\r\n\r\nconst Tasks: React.FC<mapStateToPropsType & mapDispatchToPropsType> = (props) => {\r\n\r\n    let [textAreaValue, ChangeValueTextArea] = useState('');\r\n    let [textInputValue, ChangeValueInput] = useState('');\r\n\r\n    let textAreaChange = (e: any) => {\r\n        if (e.target.scrollHeight < 140) {\r\n            e.target.style.height = 76 + 'px';\r\n            e.target.style.height = e.target.scrollHeight + 'px';\r\n            ChangeValueTextArea(e.target.value);\r\n        }\r\n    };\r\n    if (props.changedSubFolderId === null || props.changedFolderId === null) {\r\n        return <div className={css.tasks}>\r\n            <div className={css.tasks__body}>\r\n                <div className={css.tasks__popup}>\r\n                    Выберите папку\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    return <div className={css.tasks}>\r\n        <div className={css.tasks__body}>\r\n            <div className={css.tasks__items}>\r\n                {props.taskItems}\r\n            </div>\r\n            <div className={css.footer}>\r\n                <div className={css.footer__title}>\r\n                    <span>\r\n                        Тема:\r\n                    </span><br/>\r\n                    <input type=\"text\" value={textInputValue} onChange={(e) => {\r\n                        ChangeValueInput(e.target.value)\r\n                    }}/>\r\n                </div>\r\n                <div className={css.footer__text}>\r\n                    <span>\r\n                        Текст:\r\n                    </span><br/>\r\n                    <textarea onChange={(e) => textAreaChange(e)} value={textAreaValue}/>\r\n                </div>\r\n                <button onClick={() => {\r\n                    if(textAreaValue !== '' && textInputValue !== \"\"){\r\n                        props.addNewTaskThunk(textInputValue, textAreaValue);\r\n                        ChangeValueTextArea('');\r\n                        ChangeValueInput('');\r\n                    }\r\n                }\r\n                }>\r\n                    Сохранить\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        changedFolderId: state.FolderPage.ChangedFolderId,\r\n        changedSubFolderId: state.FolderPage.ChangedSubFolderId,\r\n        taskItems: state.FolderPage.tasks && state.FolderPage.tasks!.map((el,index) => {\r\n            if(el.idFolder === state.FolderPage.ChangedFolderId) {\r\n                if(el.idSubFolder === state.FolderPage.ChangedSubFolderId) {\r\n                    return <TaskItem key = {el.text + el.title + el.idSubFolder + el.idFolder} task={el} />\r\n                }\r\n            }\r\n        })\r\n    }\r\n};\r\n\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype mapDispatchToPropsType = {\r\n    addNewTaskThunk: (title: string, text: string) => void\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {addNewTaskThunk})\r\n)(Tasks);","import React, {useEffect, useState} from 'react';\r\nimport css from \"./App.module.css\";\r\nimport Folders from \"./components/folders/Folders\";\r\nimport Tasks from \"./components/tasks/Tasks\";\r\nimport {compose} from 'redux';\r\nimport {connect} from \"react-redux\";\r\nimport {addNewFolderThunk, getFoldersThunk, getTasksThunk} from \"./components/redux/Reducer\";\r\nimport {StateType} from \"./components/redux/store\";\r\n\r\nfunction App(props:mapStateToPropsType & mapDispatchToPropsType) {\r\n    let [isGotFolders,SetFolders] = useState(false);\r\n    useEffect(  () => {\r\n        props.getFoldersThunk();\r\n        props.getTasksThunk();\r\n        SetFolders(true);\r\n    }, []);\r\n    if(!isGotFolders) {\r\n        return <div>loading</div>\r\n    }\r\n    return (\r\n        <div className={css.container}>\r\n            <div className={css.container__wrapped}>\r\n                <Folders/>\r\n                <Tasks/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state:StateType) => {\r\n    return {\r\n\r\n    }\r\n};\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype mapDispatchToPropsType = {\r\n    getFoldersThunk:() => void,\r\n    getTasksThunk: () => void\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {addNewFolderThunk, getFoldersThunk,getTasksThunk})\r\n)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore, Action} from \"redux\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {Reducer} from \"./Reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    FolderPage:Reducer\r\n});\r\n\r\n\r\n// @ts-ignore\r\n/*const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));*/\r\nconst store = createStore(reducers,applyMiddleware(thunk));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\n//thunk\r\nexport type ThunkActionType<AT extends Action,R = Promise<void>>\r\n    = ThunkAction<R, ()=>StateType, unknown, AT>;\r\n\r\n\r\n//action\r\nexport type ActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n\r\n\r\n//state\r\ntype RootReducerType = typeof reducers;//Вернет новый стейт\r\nexport type StateType = ReturnType<RootReducerType>\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./components/redux/store\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"folder\":\"folder_folder__3HM7b\",\"folder_delete\":\"folder_folder_delete__qiG8A\",\"folder__plus\":\"folder_folder__plus__1RBQM\",\"folder__plus_active\":\"folder_folder__plus_active__32ZSs\",\"folder__settings\":\"folder_folder__settings__CIL0Q\",\"settings__list\":\"folder_settings__list__1nKy1\",\"folder__name\":\"folder_folder__name__3Yw_-\",\"folder__name_delete\":\"folder_folder__name_delete__2BhWG\",\"iridescent_color\":\"folder_iridescent_color__11bBk\",\"folder__items\":\"folder_folder__items__1t0kW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasks\":\"Tasks_tasks__2nWCX\",\"tasks__popup\":\"Tasks_tasks__popup__3ylLK\",\"tasks__body\":\"Tasks_tasks__body__24i36\",\"tasks__items\":\"Tasks_tasks__items__1YjTx\",\"footer\":\"Tasks_footer__VdOGf\",\"footer__title\":\"Tasks_footer__title__31klH\",\"footer__text\":\"Tasks_footer__text__1e-4h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskItem\":\"taskItem_taskItem__ZrKuk\",\"taskItem__topic\":\"taskItem_taskItem__topic__DAHAi\",\"taskItem__text\":\"taskItem_taskItem__text__21YOu\",\"taskItem__more\":\"taskItem_taskItem__more__1Vdvc\",\"taskItem__more_active\":\"taskItem_taskItem__more_active__2oImQ\",\"taskItem__text_open\":\"taskItem_taskItem__text_open__3ORWU\",\"taskItem__cross\":\"taskItem_taskItem__cross__3yInU\",\"text__area\":\"taskItem_text__area__38u-t\",\"text__area_active\":\"taskItem_text__area_active__3RyoK\"};"],"sourceRoot":""}